---
title: Welcome to Git
---

## Outline

- Intro to Concepts (30 min)
- Some Setup (20min)
- Break (10min)
- Exercises (45min)
- Reflection (15min)

# Abstractions

## What Now?

- Abstractions are mental models.
- Adopting the git way of thinking involves "leveling up" your abstraction of what matters in files and directories.
- Abstractions are hard, so don't worry if you don't get it right away.

Let's set up for an analogy to familiar abstractions; numbers, tables, and plots.

## Numbers

Bellamy was just born and weighs 8lbs.
Conner is 26 and weighs 142lbs.
Drew is 44 and weighs 209lbs.
Erick is 52 and weighs 150lbs.

## Table

|Name    | Age | Weight |
|--------|-----|--------|
|Bellamy |  0  |   8    |
|Conner  | 26  | 142    |
|Drew    | 44  | 209    |
|Erick   | 52  | 150    |

## Plot

![](media/plots-are-abstractions.png){fig-align="center"}

# Intro to Concepts

## Git Terminology

- Commits are snapshots of work at a point.
- Branches are convenient names for the most recent commit in a work stream.
- Remotes are other repositories the code is aware of.
- Merging takes multiple branches from local or remote repos and combines them.

## Git Terms Analogized to the Familiar Abstractions

- Saved files are like numbers.
- Commits are like tables.
- Branches are like plots.

## Abstractions help Organize Information

![](media/mental-model.png){fig-align="center"}

## Git vs GitHub

- Git is a tool for managing source code.
- GitHub augments git with tools for discussing source code.

![](media/git-github-pic-insta.png){fig-align="center"}

## GitHub Terminology

- Issues are documented needs for change.
- Pull Requests are running requests to merge changes from a branch.

# Reflection

## What was Learned

- Key terms for Git and GitHub
- How to make commits and resolve merge conflicts

## Advanced Features

- You can undo specific commits with `git revert`
- You can grab specific files from specific commits with `git checkout`
- You can move a set of changes to a different branch with `git rebase`
- You can pluck specific commits from a branch's history with `git cherry-pick`

## Impacts on Workflow

- It enables us to organize code by project and deliverable, regardless of who ran the code where.
- It enables us to organize changes by the goal they accomplished.
- It anchors discussion to specific code, and specific changes.
- It encourages us to think in incremental changes, which can be a helpful mindset for large projects.
- It makes it easier to share code.

## How to get started?

- Go make a repository!
- Struggle on.

## Links to Other Resources

- Videos
   - [Git 1: What is Git? - YouTube](https://www.youtube.com/watch?v=-m2J3WqL6Ec&list=PL5wn5CYPHXCMIBRbE-d0n_6iqTWHdjc7x)
   - [What is GitHub? - YouTube](https://www.youtube.com/watch?v=w3jLJU7DT5E)
   - [Git and GitHub for Beginners - Crash Course](https://www.youtube.com/watch?v=RGOj5yH7evk)
- Documentation
   - [Git - Documentation (git-scm.com)](https://git-scm.com/doc)
- Cheat Sheets
   - [Git Cheatsheet :: NDP Software](https://ndpsoftware.com/git-cheatsheet.html#loc=index;)
